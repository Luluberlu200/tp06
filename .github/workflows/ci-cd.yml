name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: tp02-back
        run: |
          npm ci

      - name: Backend sanity (json-server smoke)
        working-directory: tp02-back
        run: |
          # ensure json-server can start and show its version
          npx json-server --version || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install frontend requirements
        working-directory: tp02-front
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Frontend sanity (import check)
        working-directory: tp02-front
        run: |
          python - <<'PY'
          import importlib
          modules = ['flask','requests','dotenv']
          missing = []
          for m in modules:
              try:
                  importlib.import_module(m)
              except Exception:
                  missing.append(m)
          if missing:
              print('Missing modules:', missing)
              raise SystemExit(1)
          print('All required modules import successfully')
          PY

  build-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build backend Docker image
        run: |
          docker build -t image_back:latest tp02-back

      - name: Build frontend Docker image
        run: |
          docker build -t image_front:latest tp02-front

      - name: Push images to registry (optional)
        if: env.REGISTRY != '' && secrets.REGISTRY_USERNAME && secrets.REGISTRY_TOKEN
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
        run: |
          echo "$REGISTRY" | grep -q . || exit 1
          echo "$REGISTRY"/image_back:latest
          echo "$REGISTRY"/image_front:latest
          echo "Log in and push images (skipped in template)"
          # You can add docker login and push commands here. Use secrets.REGISTRY_USERNAME and secrets.REGISTRY_TOKEN
